[project]
    name = "langmax"
    version = "0.1.0"
    description = "Leveraging the capabilities of LLMs to improve day-to-day tasks."
    authors = [
        { name = "Alex", email = "30626291+ipruning@users.noreply.github.com" },
    ]
    readme = "README.md"
    requires-python = "~= 3.12"
    dependencies = [
    "anthropic~=0.33.1",
    "autocorrect-py~=2.9.0",
    "banks~=0.4.1",
    "bm25s[full]~=0.1.10",
    "chromadb~=0.5.5",
    "controlflow~=0.8.2",
    "dspy-ai~=2.4.13",
    "einops~=0.8.0",
    "fire~=0.6.0",
    "google-generativeai~=0.7.2",
    "gptzip~=0.0.2",
    "gradio~=4.41.0",
    "great-tables~=0.10.0",
    "httpx[socks]~=0.27.0",
    "ipykernel~=6.29.5",
    "jinja2~=3.1.4",
    "langchain~=0.2.13",
    "langdetect~=1.0.9",
    "litellm~=1.43.9",
    "llama-index~=0.10.65",
    "lmql~=0.7.3",
    "marimo~=0.7.20",
    "matplotlib~=3.9.2",
    "mlx-lm~=0.16.1",
    "mlx~=0.16.3",
    "ollama~=0.3.1",
    "openai~=1.40.6",
    "openpyxl~=3.1.5",
    "pandas~=2.2.2",
    "parea-ai~=0.2.203",
    "pathvalidate~=3.2.0",
    "polars~=1.4.1",
    "pypinyin~=0.52.0",
    "python-dotenv~=1.0.1",
    "python-fasthtml~=0.3.6",
    "replicate~=0.31.0",
    "rich~=13.7.1",
    "sentencepiece~=0.2.0",
    "sglang[openai]~=0.2.12",
    "streamlit~=1.37.1",
    "tenacity~=8.5.0",
    "tiktoken~=0.7.0",
    "tqdm~=4.66.5",
    "transformers[torch]~=4.44.0",
    "wandb~=0.17.6",
    "mlx-whisper~=0.2.0",
]

[tool.pyright]
    pythonVersion              = "3.12"
    reportArgumentType         = "warning"
    reportAttributeAccessIssue = "warning"
    reportRedeclaration        = "none"
    reportUnusedExpression     = "warning"
    typeCheckingMode           = "standard"
    venv                       = ".venv"
    venvPath                   = "."

[tool.rye]
    managed = true
    dev-dependencies = [
        "commitizen~=3.28.0",
        "coverage[toml]~=7.6.1",
        "debugpy~=1.8.3",
        "mypy~=1.11.1",
        "nox~=2024.4.15",
        "pre-commit~=3.8.0",
        "pytest-cov~=5.0.0",
        "pytest~=8.3.2",
        "ruff~=0.5.6",
    ]

[tool.ruff]
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".git-rewrite",
        ".hg",
        ".ipynb_checkpoints",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pyenv",
        ".pytest_cache",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        ".vscode",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "site-packages",
        "venv",
    ]
    indent-width = 4
    line-length = 120
    target-version = "py312"

[tool.ruff.lint]
    select = ["A", "E", "F", "I", "N", "T100"]
    ignore = ["E501"]

    fixable   = ["ALL"]
    unfixable = []

    dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
    quote-style                = "double"
    indent-style               = "space"
    skip-magic-trailing-comma  = false
    line-ending                = "auto"
    docstring-code-format      = true
    docstring-code-line-length = "dynamic"

[tool.coverage.run]
    source = ["src"]
    omit = [
        ".*",
        "*/site-packages/*",
        "*/__init__.py",
        "*/__main__.py",
        "*/tests/*",
        "*/excp.py",
    ]

[tool.coverage.report]
    fail_under = 75
    show_missing = true
    exclude_lines = [
        "def __repr__",
        "except ImportError:",
        "if __name__ == .__main__.:",
        "if self.debug:",
        "pass",
        "pragma: no cover",
        "raise NotImplementedError",
    ]

[tool.pytest.ini_options]
    python_files = ["test_*.py"]
    testpaths    = ["tests", "src"]
    addopts      = "-v --cov=src --cov-report=term-missing"
